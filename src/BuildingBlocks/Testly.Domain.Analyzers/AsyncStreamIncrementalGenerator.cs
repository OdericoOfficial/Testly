using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Testly.Domain.Attributes;
using static Testly.Domain.Analyzers.AsyncStreamSyntaxProvider;

namespace Testly.Domain.Analyzers
{
    [Generator(LanguageNames.CSharp)]
#pragma warning disable RS1036 // 指定分析器禁止的 API 强制设置
    internal class AsyncStreamIncrementalGenerator : IIncrementalGenerator
#pragma warning restore RS1036 // 指定分析器禁止的 API 强制设置
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            context.RegisterSourceOutput(context.SyntaxProvider.CreateSyntaxProvider(Predicate, Transform), (context, tuple) =>
            {
                var namespaceSet = new HashSet<string>();
                var builder = new StringBuilder();
                builder.AppendLine("// <auto-generated />");
                builder.AppendLine();
                builder.AppendLine("using Microsoft.Extensions.DependencyInjection;");
                builder.AppendLine("using Orleans.Streams;");
                builder.AppendLine("using static Testly.Domain.Grains.NullSetter;");
                foreach (var item in tuple.Infos)
                {
                    if (item.EventNamespace != string.Empty
                        && !namespaceSet.Contains(item.EventNamespace))
                    {
                        builder.AppendLine($"using {item.EventNamespace};");
                        namespaceSet.Add(item.EventNamespace);
                    }
                }

                builder.AppendLine();

                var nameBuilder = new StringBuilder();
                nameBuilder.Append(tuple.GrainType.IsAbstract ? "public abstract partial class " : "internal sealed partial class ");
                nameBuilder.Append(tuple.GrainType.Name);
                if (tuple.GrainType.TypeParameters.Length > 0)
                {
                    nameBuilder.Append("<");
                    for (var i = 0; i < tuple.GrainType.TypeParameters.Length; i++)
                    {
                        if (i != 0)
                            nameBuilder.Append(", ");
                        nameBuilder.Append(tuple.GrainType.TypeParameters[i]);
                    }
                    nameBuilder.Append(">");
                }
                var name = nameBuilder.ToString();
                var prefix = tuple.GrainType.IsAbstract ? "protected" : "private";
                 

                builder.AppendLine(@$"namespace {tuple.GrainType.ContainingNamespace.ToDisplayString()}
{{
    {name}
    {{
#nullable enable");

                var subscribeBuilder = new StringBuilder();
                var unsubscribeBuilder = new StringBuilder();

                var handle = tuple.GrainType.GetAttributes()
                    .Any(attribute => attribute.AttributeClass is not null
                        && attribute.AttributeClass.Name == nameof(OverrideHandleAttribute));
                var handlePrefix = handle ? " override" : " virtual";
                handlePrefix = tuple.GrainType.IsSealed ? string.Empty : handlePrefix;
                prefix = handle ? "protected" : prefix;

                subscribeBuilder.AppendLine($@"
        {prefix}{handlePrefix} async Task SubscribeAllAsync()
        {{");
                if (handle)
                    subscribeBuilder.AppendLine("            await base.SubscribeAllAsync();");

                unsubscribeBuilder.AppendLine($@"
        {prefix} {handlePrefix} async Task UnsubscribeAllAsync()
        {{");
                if (handle)
                    unsubscribeBuilder.AppendLine("            await base.UnsubscribeAllAsync();");

                var needSubscribe = false;

                foreach (var item in tuple.Infos)
                {
                    var fieldPerfix = $"_{char.ToLower(item.EventName[0])}{item.EventName.Substring(1, item.EventName.Length - 1)}";

                    if (item.IsImplicit)
                        builder.Append($@"
        private IAsyncStream<{item.EventName}>? {fieldPerfix}Stream;");

                    builder.AppendLine($@"
        {prefix} IAsyncStream<{item.EventName}> {item.EventName}Stream
            => {fieldPerfix}Stream ??= StreamProvider.GetStream<{item.EventName}>(GrainId);");

                    if (item.NeedSubscribe)
                    {
                        needSubscribe = true;
                        builder.AppendLine($@"
        private IAsyncObserver<{item.EventName}>? {fieldPerfix}Observer;
        {prefix} IAsyncObserver<{item.EventName}> {item.EventName}Observer
            => {fieldPerfix}Observer ??= ServiceProvider.GetRequiredService<IAsyncObserver<{item.EventName}>>();

        private StreamSubscriptionHandle<{item.EventName}>? {fieldPerfix}Handle;");

                        subscribeBuilder.AppendLine($"            {fieldPerfix}Handle = await {item.EventName}Stream.SubscribeAsync({item.EventName}Observer);");
                        unsubscribeBuilder.AppendLine($"            await UnsubscribeSetNullAsync(ref {fieldPerfix}Handle);");
                    }
                }

                subscribeBuilder.AppendLine("        }");
                unsubscribeBuilder.AppendLine("        }");

                if (needSubscribe)
                {
                    builder.Append(subscribeBuilder.ToString());
                    builder.Append(unsubscribeBuilder.ToString());
                }

                builder.AppendLine(@"    }
}");
                context.AddSource($"{tuple.GrainType.Name}.stream.g.cs", SourceText.From(builder.ToString(), Encoding.UTF8));
            });
        }
    }
}
