using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using static Testly.Domain.Analyzers.GrainWithGuidKeySyntaxProvider;

namespace Testly.Domain.Analyzers
{
    [Generator(LanguageNames.CSharp)]
    internal class GrainWithGuidKeyIncrementalGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            context.RegisterSourceOutput(context.SyntaxProvider.CreateSyntaxProvider(Predicate, Transform), (context, info) =>
            {
                var builder = new StringBuilder();
                builder.AppendLine("// <auto-generated />");
                builder.AppendLine();
                builder.AppendLine($@"namespace {info.ContainingNamespace.ToDisplayString()}
{{");
                if (info.IsAbstract)
                    builder.Append($@"   public abstract partial class {info.Name}");
                else
                    builder.Append($@"   internal partial class {info.Name}");

                if (info.TypeArguments.Length > 0)
                {
                    builder.Append('<');
                    for (var i = 0; i < info.TypeArguments.Length; i++)
                    {
                        if (i > 0)
                            builder.Append(", ");
                        builder.Append(info.TypeArguments[i].Name);
                    }
                    builder.Append('>');
                }

                builder.AppendLine($@"
    {{
        private Guid? _grainId;
        protected Guid GrainId
            => _grainId ??= this.GetPrimaryKey();
    }}
}}");
                context.AddSource($"{info.Name}.key.g.cs", SourceText.From(builder.ToString(), Encoding.UTF8));
            });
        }
    }
}
