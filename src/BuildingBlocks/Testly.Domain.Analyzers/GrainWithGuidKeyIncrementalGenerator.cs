using static Testly.Domain.Analyzers.GrainWithGuidKeySyntaxProvider;
using Microsoft.CodeAnalysis;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace Testly.Domain.Analyzers
{
    [Generator(LanguageNames.CSharp)]
#pragma warning disable RS1036 // 指定分析器禁止的 API 强制设置
    internal class GrainWithGuidKeyIncrementalGenerator : IIncrementalGenerator
#pragma warning restore RS1036 // 指定分析器禁止的 API 强制设置
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            context.RegisterSourceOutput(context.SyntaxProvider.CreateSyntaxProvider(Predicate, Transform), (context, symbol) =>
            {
                var builder = new StringBuilder();
                builder.AppendLine("// <auto-generated />");
                builder.AppendLine();
                var nameBuilder = new StringBuilder();
                nameBuilder.Append(symbol.IsAbstract ? "public abstract partial class " : "internal sealed partial class ");
                nameBuilder.Append(symbol.Name);
                if (symbol.TypeParameters.Length > 0)
                {
                    nameBuilder.Append("<");
                    for (var i = 0; i < symbol.TypeParameters.Length; i++)
                    {
                        if (i != 0)
                            nameBuilder.Append(", ");
                        nameBuilder.Append(symbol.TypeParameters[i]);
                    }
                    nameBuilder.Append(">");
                }
                var name = nameBuilder.ToString();
                var prefix = symbol.IsAbstract ? "protected" : "private";
                builder.AppendLine(@$"namespace {symbol.ContainingNamespace.ToDisplayString()}
{{
    {name}
    {{
#nullable enable
        private Guid? _grainId;
        {prefix} Guid GrainId
            => _grainId ??= this.GetPrimaryKey();
    }}
}}"); 
                context.AddSource($"{symbol.Name}.id.g.cs", SourceText.From(builder.ToString(), Encoding.UTF8));
            });
        }
    }
}
